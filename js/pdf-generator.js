// PDF Quotation Generator
// This file generates actual PDF quotations with real service provider information

/**
 * Generate a PDF quotation with actual service provider information
 * @param {Object} quotationData - The quotation data
 * @param {Object} serviceProvider - The service provider information
 * @param {Object} service - The service information
 * @param {Object} event - The event information
 * @returns {Promise<string>} Base64 encoded PDF
 */
async function generateQuotationPDF(quotationData, serviceProvider, service, event) {
    try {
        // Create PDF content using jsPDF
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();
        
        // Set up colors (Bonica brand colors)
        const primaryColor = '#0d6efd'; // Blue
        const secondaryColor = '#6c757d'; // Gray
        const accentColor = '#28a745'; // Green
        
        // Add Bonica Logo (you'll need to add the actual logo image)
        // For now, we'll use a placeholder text
        doc.setFontSize(24);
        doc.setTextColor(primaryColor);
        doc.text('BONICA', 20, 30);
        doc.setFontSize(12);
        doc.setTextColor(secondaryColor);
        doc.text('Event Management System', 20, 37);
        
        // Add a line separator
        doc.setDrawColor(primaryColor);
        doc.setLineWidth(0.5);
        doc.line(20, 42, 190, 42);
        
        // Quotation Header
        doc.setFontSize(20);
        doc.setTextColor(primaryColor);
        doc.text('QUOTATION', 20, 55);
        
        // Quotation Details
        doc.setFontSize(10);
        doc.setTextColor(secondaryColor);
        doc.text(`Quotation ID: ${quotationData.quotation_id}`, 20, 65);
        doc.text(`Date: ${quotationData.quotation_submission_date}`, 20, 70);
        doc.text(`Time: ${quotationData.quotation_submission_time}`, 20, 75);
        
        // Service Provider Information
        doc.setFontSize(14);
        doc.setTextColor(primaryColor);
        doc.text('SERVICE PROVIDER', 20, 90);
        
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);
        doc.text(`${serviceProvider.service_provider_name} ${serviceProvider.service_provider_surname}`, 20, 100);
        doc.text(`Email: ${serviceProvider.service_provider_email}`, 20, 107);
        doc.text(`Contact: ${serviceProvider.service_provider_contact}`, 20, 114);
        doc.text(`Location: ${serviceProvider.service_provider_location}`, 20, 121);
        doc.text(`Rating: ${serviceProvider.service_provider_rating}/5.0`, 20, 128);
        
        // Service Information
        doc.setFontSize(14);
        doc.setTextColor(primaryColor);
        doc.text('SERVICE DETAILS', 20, 145);
        
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);
        doc.text(`Service: ${service.service_name}`, 20, 155);
        doc.text(`Type: ${service.service_type}`, 20, 162);
        doc.text(`Description: ${service.service_description}`, 20, 169);
        doc.text(`Duration: ${service.service_hours} hours`, 20, 176);
        
        // Event Information
        doc.setFontSize(14);
        doc.setTextColor(primaryColor);
        doc.text('EVENT INFORMATION', 20, 190);
        
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);
        doc.text(`Event Type: ${event.event_type}`, 20, 200);
        doc.text(`Date: ${event.event_date}`, 20, 207);
        doc.text(`Location: ${event.event_location}`, 20, 214);
        
        // Pricing Section
        doc.setFontSize(16);
        doc.setTextColor(accentColor);
        doc.text('QUOTATION PRICE', 20, 235);
        
        doc.setFontSize(24);
        doc.setTextColor(accentColor);
        doc.text(`R ${quotationData.quotation_price.toLocaleString()}`, 20, 250);
        
        // Service Details
        doc.setFontSize(14);
        doc.setTextColor(primaryColor);
        doc.text('SERVICE DETAILS', 20, 265);
        
        doc.setFontSize(10);
        doc.setTextColor(0, 0, 0);
        const splitDetails = doc.splitTextToSize(quotationData.quotation_details, 170);
        doc.text(splitDetails, 20, 275);
        
        // Terms and Conditions
        doc.setFontSize(12);
        doc.setTextColor(secondaryColor);
        doc.text('TERMS AND CONDITIONS:', 20, 300);
        
        doc.setFontSize(10);
        doc.text('• This quotation is valid for 30 days from the date of issue', 20, 310);
        doc.text('• Payment terms: 50% deposit, 50% on completion', 20, 317);
        doc.text('• Cancellation policy: 48 hours notice required', 20, 324);
        doc.text('• All prices include VAT where applicable', 20, 331);
        
        // Footer
        doc.setFontSize(8);
        doc.setTextColor(secondaryColor);
        doc.text('Generated by Bonica Event Management System', 20, 285);
        doc.text('For inquiries, contact: info@bonica.co.za', 20, 292);
        
        // Generate PDF as base64
        const pdfOutput = doc.output('datauristring');
        return pdfOutput;
        
    } catch (error) {
        console.error('Error generating PDF:', error);
        throw error;
    }
}

/**
 * Upload generated PDF to Supabase Storage
 * @param {string} pdfBase64 - Base64 encoded PDF
 * @param {string} fileName - Name of the file
 * @returns {Promise<string>} Public URL of uploaded file
 */
async function uploadPDFToStorage(pdfBase64, fileName) {
    try {
        // Convert base64 to blob
        const base64Data = pdfBase64.split(',')[1];
        const byteCharacters = atob(base64Data);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: 'application/pdf' });
        
        // Upload to Supabase Storage
        const { data, error } = await supabase.storage
            .from('quotations')
            .upload(fileName, blob, {
                contentType: 'application/pdf',
                upsert: true
            });
        
        if (error) throw error;
        
        // Get public URL
        const { data: urlData } = supabase.storage
            .from('quotations')
            .getPublicUrl(fileName);
        
        return urlData.publicUrl;
        
    } catch (error) {
        console.error('Error uploading PDF:', error);
        throw error;
    }
}

/**
 * Generate and save quotation PDF
 * @param {Object} quotationData - The quotation data
 * @param {Object} serviceProvider - The service provider information
 * @param {Object} service - The service information
 * @param {Object} event - The event information
 * @returns {Promise<string>} Public URL of the generated PDF
 */
async function generateAndSaveQuotationPDF(quotationData, serviceProvider, service, event) {
    try {
        // Generate PDF
        const pdfBase64 = await generateQuotationPDF(quotationData, serviceProvider, service, event);
        
        // Create filename
        const fileName = `quotation_${quotationData.quotation_id}_${serviceProvider.service_provider_id}.pdf`;
        
        // Upload to storage
        const publicUrl = await uploadPDFToStorage(pdfBase64, fileName);
        
        return publicUrl;
        
    } catch (error) {
        console.error('Error generating and saving PDF:', error);
        throw error;
    }
}

/**
 * Update quotation record with generated PDF URL
 * @param {string} quotationId - The quotation ID
 * @param {string} pdfUrl - The PDF URL
 * @param {string} fileName - The file name
 */
async function updateQuotationWithPDF(quotationId, pdfUrl, fileName) {
    try {
        const { error } = await supabase
            .from('quotation')
            .update({
                quotation_file_path: pdfUrl,
                quotation_file_name: fileName,
                quotation_status: 'confirmed'
            })
            .eq('quotation_id', quotationId);
        
        if (error) throw error;
        
        console.log('Quotation updated with PDF:', quotationId);
        
    } catch (error) {
        console.error('Error updating quotation:', error);
        throw error;
    }
}

/**
 * Filter quotations by specific criteria
 * @param {Object} filters - Filter criteria
 * @param {string} filters.status - Quotation status filter
 * @param {string} filters.dateFrom - Start date filter
 * @param {string} filters.dateTo - End date filter
 * @param {string} filters.serviceType - Service type filter
 * @param {string} filters.location - Location filter
 * @returns {Promise<Array>} Filtered quotations
 */
async function filterQuotations(filters = {}) {
    try {
        let query = supabase
            .from('quotation')
            .select(`
                *,
                service_provider:service_provider_id (
                    service_provider_name,
                    service_provider_surname,
                    service_provider_email,
                    service_provider_contact,
                    service_provider_location,
                    service_provider_rating,
                    service_provider_service_type
                ),
                job_cart:job_cart_id (
                    job_cart_item,
                    event:event_id (
                        event_type,
                        event_date,
                        event_location
                    )
                )
            `);

        // Apply filters
        if (filters.status) {
            query = query.eq('quotation_status', filters.status);
        }
        
        if (filters.dateFrom) {
            query = query.gte('quotation_submission_date', filters.dateFrom);
        }
        
        if (filters.dateTo) {
            query = query.lte('quotation_submission_date', filters.dateTo);
        }
        
        if (filters.serviceType) {
            query = query.eq('service_provider.service_provider_service_type', filters.serviceType);
        }
        
        if (filters.location) {
            query = query.eq('service_provider.service_provider_location', filters.location);
        }

        const { data: quotations, error } = await query;
        
        if (error) throw error;
        
        return quotations;
        
    } catch (error) {
        console.error('Error filtering quotations:', error);
        throw error;
    }
}

/**
 * Process all quotations and generate PDFs
 * Filters existing quotations from the database instead of generating new ones
 */
async function generateAllQuotationPDFs() {
    try {
        // Get all quotations that need PDFs - filter existing ones
        const { data: quotations, error } = await supabase
            .from('quotation')
            .select(`
                *,
                service_provider:service_provider_id (
                    service_provider_name,
                    service_provider_surname,
                    service_provider_email,
                    service_provider_contact,
                    service_provider_location,
                    service_provider_rating
                ),
                job_cart:job_cart_id (
                    job_cart_item,
                    event:event_id (
                        event_type,
                        event_date,
                        event_location
                    )
                )
            `)
            .eq('quotation_status', 'confirmed')
            .is('quotation_file_path', null); // Only quotations without PDFs
        
        if (error) throw error;
        
        // Get service information for each quotation
        const quotationsWithServices = await Promise.all(
            quotations.map(async (quotation) => {
                // Get service information based on job cart item
                const { data: service, error: serviceError } = await supabase
                    .from('service')
                    .select('*')
                    .eq('service_name', quotation.job_cart.job_cart_item)
                    .single();
                
                if (serviceError) {
                    console.warn(`Service not found for ${quotation.job_cart.job_cart_item}:`, serviceError);
                    // Create a default service object if not found
                    return {
                        ...quotation,
                        service: {
                            service_name: quotation.job_cart.job_cart_item,
                            service_type: 'General',
                            service_description: `Professional ${quotation.job_cart.job_cart_item} services`,
                            service_hours: 4
                        }
                    };
                }
                
                return {
                    ...quotation,
                    service: service
                };
            })
        );
        
        // Generate PDFs for each quotation
        const results = await Promise.all(
            quotationsWithServices.map(async (quotation) => {
                try {
                    const pdfUrl = await generateAndSaveQuotationPDF(
                        quotation,
                        quotation.service_provider,
                        quotation.service,
                        quotation.job_cart.event
                    );
                    
                    const fileName = `quotation_${quotation.quotation_id}_${quotation.service_provider_id}.pdf`;
                    
                    await updateQuotationWithPDF(quotation.quotation_id, pdfUrl, fileName);
                    
                    return {
                        quotation_id: quotation.quotation_id,
                        service_name: quotation.service.service_name,
                        pdf_url: pdfUrl,
                        status: 'success'
                    };
                } catch (error) {
                    console.error(`Error processing quotation ${quotation.quotation_id}:`, error);
                    return {
                        quotation_id: quotation.quotation_id,
                        service_name: quotation.service.service_name,
                        error: error.message,
                        status: 'error'
                    };
                }
            })
        );
        
        // Log results
        const successful = results.filter(r => r.status === 'success');
        const failed = results.filter(r => r.status === 'error');
        
        console.log(`PDF Generation Complete:`);
        console.log(`✅ Successful: ${successful.length}`);
        console.log(`❌ Failed: ${failed.length}`);
        
        if (failed.length > 0) {
            console.log('Failed quotations:', failed);
        }
        
        return results;
        
    } catch (error) {
        console.error('Error generating all quotation PDFs:', error);
        throw error;
    }
}

/**
 * Preview generated PDF
 * @param {string} quotationId - The quotation ID
 */
async function previewGeneratedPDF(quotationId) {
    try {
        const { data: quotation, error } = await supabase
            .from('quotation')
            .select('quotation_file_path, quotation_file_name')
            .eq('quotation_id', quotationId)
            .single();
        
        if (error) throw error;
        
        if (quotation.quotation_file_path) {
            window.open(quotation.quotation_file_path, '_blank');
        } else {
            showNotification('No PDF available for this quotation', 'warning');
        }
        
    } catch (error) {
        console.error('Error previewing PDF:', error);
        showNotification('Error previewing PDF: ' + error.message, 'error');
    }
}

/**
 * Download generated PDF
 * @param {string} quotationId - The quotation ID
 */
async function downloadGeneratedPDF(quotationId) {
    try {
        const { data: quotation, error } = await supabase
            .from('quotation')
            .select('quotation_file_path, quotation_file_name')
            .eq('quotation_id', quotationId)
            .single();
        
        if (error) throw error;
        
        if (quotation.quotation_file_path) {
            const link = document.createElement('a');
            link.href = quotation.quotation_file_path;
            link.download = quotation.quotation_file_name || 'quotation.pdf';
            link.target = '_blank';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            showNotification('Download started!', 'success');
        } else {
            showNotification('No PDF available for this quotation', 'warning');
        }
        
    } catch (error) {
        console.error('Error downloading PDF:', error);
        showNotification('Error downloading PDF: ' + error.message, 'error');
    }
}

/**
 * Generate PDFs for a specific set of quotations
 * @param {Array} quotations - Array of quotations to process
 * @returns {Promise<Array>} Results of PDF generation
 */
async function generatePDFsForQuotations(quotations) {
    try {
        // Get service information for each quotation
        const quotationsWithServices = await Promise.all(
            quotations.map(async (quotation) => {
                // Get service information based on job cart item
                const { data: service, error: serviceError } = await supabase
                    .from('service')
                    .select('*')
                    .eq('service_name', quotation.job_cart.job_cart_item)
                    .single();
                
                if (serviceError) {
                    console.warn(`Service not found for ${quotation.job_cart.job_cart_item}:`, serviceError);
                    // Create a default service object if not found
                    return {
                        ...quotation,
                        service: {
                            service_name: quotation.job_cart.job_cart_item,
                            service_type: 'General',
                            service_description: `Professional ${quotation.job_cart.job_cart_item} services`,
                            service_hours: 4
                        }
                    };
                }
                
                return {
                    ...quotation,
                    service: service
                };
            })
        );
        
        // Generate PDFs for each quotation
        const results = await Promise.all(
            quotationsWithServices.map(async (quotation) => {
                try {
                    const pdfUrl = await generateAndSaveQuotationPDF(
                        quotation,
                        quotation.service_provider,
                        quotation.service,
                        quotation.job_cart.event
                    );
                    
                    const fileName = `quotation_${quotation.quotation_id}_${quotation.service_provider_id}.pdf`;
                    
                    await updateQuotationWithPDF(quotation.quotation_id, pdfUrl, fileName);
                    
                    return {
                        quotation_id: quotation.quotation_id,
                        service_name: quotation.service.service_name,
                        pdf_url: pdfUrl,
                        status: 'success'
                    };
                } catch (error) {
                    console.error(`Error processing quotation ${quotation.quotation_id}:`, error);
                    return {
                        quotation_id: quotation.quotation_id,
                        service_name: quotation.service.service_name,
                        error: error.message,
                        status: 'error'
                    };
                }
            })
        );
        
        return results;
        
    } catch (error) {
        console.error('Error generating PDFs for quotations:', error);
        throw error;
    }
}

// Export functions for use in other files
window.generateQuotationPDF = generateQuotationPDF;
window.generateAndSaveQuotationPDF = generateAndSaveQuotationPDF;
window.generateAllQuotationPDFs = generateAllQuotationPDFs;
window.generatePDFsForQuotations = generatePDFsForQuotations;
window.filterQuotations = filterQuotations;
window.previewGeneratedPDF = previewGeneratedPDF;
window.downloadGeneratedPDF = downloadGeneratedPDF;
